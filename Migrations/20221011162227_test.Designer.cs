// <auto-generated />
using System;
using Alumni_Network_Portal_BE.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Alumni_Network_Portal_BE.Migrations
{
    [DbContext(typeof(AlumniNetworkDbContext))]
    [Migration("20221011162227_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowGuests")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowGuests = 1,
                            Description = "Get your cowboy boots on and bourbon ready",
                            EndTime = new DateTime(2023, 7, 5, 1, 0, 0, 0, DateTimeKind.Utc),
                            LastUpdated = new DateTime(2022, 10, 11, 16, 22, 27, 112, DateTimeKind.Utc).AddTicks(6624),
                            Name = "Party in the USA",
                            StartTime = new DateTime(2023, 7, 4, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            AllowGuests = 1,
                            Description = "The Noroff course presentation of the case project",
                            EndTime = new DateTime(2023, 10, 28, 14, 0, 0, 0, DateTimeKind.Utc),
                            LastUpdated = new DateTime(2022, 10, 11, 16, 22, 27, 112, DateTimeKind.Utc).AddTicks(6683),
                            Name = "Project Presentation",
                            StartTime = new DateTime(2023, 10, 28, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            AllowGuests = 1,
                            Description = "Get your socks on and rock on! The case period is over and we need to forget everything we have learned",
                            EndTime = new DateTime(2023, 10, 28, 20, 0, 0, 0, DateTimeKind.Utc),
                            LastUpdated = new DateTime(2022, 10, 11, 16, 22, 27, 112, DateTimeKind.Utc).AddTicks(6688),
                            Name = "After Work Beer",
                            StartTime = new DateTime(2023, 10, 28, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int>("IsPrivate")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "The noroff group",
                            IsPrivate = 0,
                            Title = "Noroff"
                        },
                        new
                        {
                            Id = 2,
                            Body = "We learn about C#",
                            IsPrivate = 0,
                            Title = "C# learning group"
                        },
                        new
                        {
                            Id = 3,
                            Body = "For members of Experis",
                            IsPrivate = 1,
                            Title = "Experis Academy"
                        },
                        new
                        {
                            Id = 4,
                            Body = "Anyone can be part of this group",
                            IsPrivate = 0,
                            Title = "Group for everyone"
                        });
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("RecieverId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EventId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RecieverId");

                    b.HasIndex("TopicId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Body = "I love peaches",
                            GroupId = 1,
                            Title = "Fun fact"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Body = "I love beaches",
                            GroupId = 2,
                            Title = "Fun fact"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Body = "I love leaches",
                            GroupId = 3,
                            Title = "Fun fact"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Body = "I love breaches",
                            GroupId = 4,
                            Title = "Fun fact"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            Body = "I love peaches",
                            Title = "Fun fact",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            Body = "I love beaches",
                            Title = "Fun fact",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            Body = "I love leaches",
                            Title = "Fun fact",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            Body = "I love breaches",
                            Title = "Fun fact",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 1,
                            Body = "From fred to olem",
                            RecieverId = 2,
                            Title = "Message"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 2,
                            Body = "From olem to fred",
                            RecieverId = 1,
                            Title = "Message"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 3,
                            Body = "From solo to johnny",
                            RecieverId = 4,
                            Title = "Message"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 4,
                            Body = "From johnny to solo",
                            RecieverId = 3,
                            Title = "Message"
                        });
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Discussion of news",
                            Name = "News"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Discuss anything that is related to fun things!",
                            Name = "Fun"
                        },
                        new
                        {
                            Id = 3,
                            Description = "We talk about anything related to animals",
                            Name = "Animals"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Food talk, recipes and anything that involves food",
                            Name = "Food"
                        });
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("FunFact")
                        .HasColumnType("text");

                    b.Property<string>("KeycloakId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Likes football",
                            FunFact = "None",
                            KeycloakId = "4f1bd04c-7e5a-406f-952d-756ed92933bc",
                            Status = "Online",
                            Username = "fred"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Likes backend and peaches",
                            FunFact = "None",
                            KeycloakId = "14b7a32e-27a4-488b-89d4-e411bec2ba2f",
                            Status = "Online",
                            Username = "olem"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Fan of sodas",
                            FunFact = "None",
                            KeycloakId = "a23f6e10-697d-4f53-bd1d-f38157e3ef54",
                            Status = "Online",
                            Username = "solo"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Mr.Bean lover",
                            FunFact = "None",
                            KeycloakId = "14b7a32e-27a4-488b-89d4-e411bec2ba2f",
                            Status = "Online",
                            Username = "johnny"
                        });
                });

            modelBuilder.Entity("Event_Group", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("GroupId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Event_Group");

                    b.HasData(
                        new
                        {
                            GroupId = 2,
                            EventId = 1
                        },
                        new
                        {
                            GroupId = 3,
                            EventId = 1
                        },
                        new
                        {
                            GroupId = 1,
                            EventId = 2
                        },
                        new
                        {
                            GroupId = 3,
                            EventId = 3
                        },
                        new
                        {
                            GroupId = 4,
                            EventId = 3
                        });
                });

            modelBuilder.Entity("Event_Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("TopicId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Event_Topic");

                    b.HasData(
                        new
                        {
                            TopicId = 2,
                            EventId = 1
                        },
                        new
                        {
                            TopicId = 2,
                            EventId = 3
                        });
                });

            modelBuilder.Entity("EventUserInvitation", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUserInvitation");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 2
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 4
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 2
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 4
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 2
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("GroupMember", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMember");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            UserId = 1
                        },
                        new
                        {
                            GroupId = 1,
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 1,
                            UserId = 3
                        },
                        new
                        {
                            GroupId = 2,
                            UserId = 1
                        },
                        new
                        {
                            GroupId = 2,
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 2,
                            UserId = 4
                        },
                        new
                        {
                            GroupId = 3,
                            UserId = 1
                        },
                        new
                        {
                            GroupId = 3,
                            UserId = 3
                        },
                        new
                        {
                            GroupId = 3,
                            UserId = 4
                        },
                        new
                        {
                            GroupId = 4,
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 4,
                            UserId = 3
                        },
                        new
                        {
                            GroupId = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("RSVP", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RSVP");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 4
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 4
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Subscribe_Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TopicId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscribe_Topic");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            UserId = 1
                        },
                        new
                        {
                            TopicId = 1,
                            UserId = 2
                        },
                        new
                        {
                            TopicId = 1,
                            UserId = 3
                        },
                        new
                        {
                            TopicId = 2,
                            UserId = 1
                        },
                        new
                        {
                            TopicId = 2,
                            UserId = 2
                        },
                        new
                        {
                            TopicId = 2,
                            UserId = 4
                        },
                        new
                        {
                            TopicId = 3,
                            UserId = 1
                        },
                        new
                        {
                            TopicId = 3,
                            UserId = 3
                        },
                        new
                        {
                            TopicId = 3,
                            UserId = 4
                        },
                        new
                        {
                            TopicId = 4,
                            UserId = 2
                        },
                        new
                        {
                            TopicId = 4,
                            UserId = 3
                        },
                        new
                        {
                            TopicId = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Event", b =>
                {
                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.User", "Author")
                        .WithMany("AuthoredEvents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Post", b =>
                {
                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.User", "Author")
                        .WithMany("AuthoredPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Event", "Event")
                        .WithMany("Posts")
                        .HasForeignKey("EventId");

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId");

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Post", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.User", "Reciever")
                        .WithMany("RecievedPosts")
                        .HasForeignKey("RecieverId");

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId");

                    b.Navigation("Author");

                    b.Navigation("Event");

                    b.Navigation("Group");

                    b.Navigation("Parent");

                    b.Navigation("Reciever");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Event_Group", b =>
                {
                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Event_Topic", b =>
                {
                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUserInvitation", b =>
                {
                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupMember", b =>
                {
                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RSVP", b =>
                {
                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribe_Topic", b =>
                {
                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni_Network_Portal_BE.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Event", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Group", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.Topic", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Alumni_Network_Portal_BE.Models.Domain.User", b =>
                {
                    b.Navigation("AuthoredEvents");

                    b.Navigation("AuthoredPosts");

                    b.Navigation("RecievedPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
